#define WORDLENGTH_T 32
void addPrime(__global unsigned char*  outputBytes, const size_t ID, __private unsigned char PRIME[]);
void subtractPrime(__global unsigned char*  outputBytes, const size_t ID,__private unsigned char PRIME[]);
char compareWithPrime(__global unsigned char*  outputBytes, const size_t ID, __private unsigned char PRIME[]);
void add(__global unsigned char* input1, __global unsigned char* input2, __global unsigned char* outputBytes, const size_t ID);
void subtractPositive(__global unsigned char* input1, __global unsigned char* input2, __global unsigned char* outputBytes, const size_t ID);
void addMod(__global unsigned char* input1, __global unsigned char* input2, __global unsigned char* outputBytes, const size_t ID, __private unsigned char PRIME[]);
void subtractMod(__global unsigned char* input1, __global unsigned char* input2, __global unsigned char* outputBytes, const size_t ID,  __private unsigned char PRIME[]);
void multiplyProductScanning(__global unsigned char* input1, __global unsigned char* input2, __global unsigned char* outputBytes, const size_t ID);
void multiplyOperandScanning(__global unsigned char* input1, __global unsigned char* input2, __global unsigned char* outputBytes, const size_t ID);
int  MIN(int x,int y);
int  MAX(int x,int y);
void montgomeryMultiplication(__global unsigned char*  x,__global unsigned char* y,__global unsigned char* result,const size_t ID,__private unsigned char PRIME[],const unsigned int m_prime);
void rightShiftFormby1InResultPriv(__private unsigned char Aplusxiy[],__private unsigned char resultPrivate[]) ;
void subtractPositiveResultPrivate(__private unsigned char resultPrivate[],__private unsigned char PRIME[]);
int  compareResultPrivPrime(__private unsigned char resultPrivate[],__private unsigned char PRIME[]);
void multiplyNoOverFlow1xWORDLENGTH(unsigned char n,const size_t ID,__global unsigned char* y,__private unsigned char xiy[]) ;
void addNoOverFlowPrivate_XIY(__private unsigned char resultPrivate[],__private unsigned char xiy[],__private unsigned char Aplusxiy[]);
void addNoOverFlowPrivateAplusxiy(unsigned int ui,__private unsigned char Aplusxiy[],__private unsigned char cteUI[], __private unsigned char PRIME[]);
void multiplyNoOverFlowCte(int n,__private unsigned char cteUI[],__private unsigned char PRIME[]);
void copyResultPrivTo(__global unsigned char*  result,__private unsigned char resultPrivate[] ,const size_t ID);
